/*
 * This source file was generated by the Gradle 'init' task
 */
package pruebagradle;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;

public class AppTest {

    private final App app = new App();

    @Test
    void testVoraz1OrdenBasico() {
        int[][] finca = {
            {0, 2, 10},
            {1, 1, 5},
            {2, 3, 15}
        };

        int[][] resultado = app.roV1(finca);
        int[] ruta = resultado[0];
        int costo = resultado[1][0];

        assertEquals(3, ruta.length);
        assertTrue(Arrays.stream(ruta).distinct().count() == 3);
        assertTrue(costo >= 0);
    }

    @Test
    void testVoraz2OrdenBasico() {
        int[][] finca = {
            {0, 2, 10},
            {1, 1, 5},
            {2, 3, 15}
        };

        int[][] resultado = app.roV2(finca);
        int[] ruta = resultado[0];
        int costo = resultado[1][0];

        assertEquals(3, ruta.length);
        assertTrue(Arrays.stream(ruta).distinct().count() == 3);
        assertTrue(costo >= 0);
    }

    @Test
    void testFuerzaBrutaResultadoValido() {
        int[][] finca = {
            {0, 2, 10},
            {1, 1, 5},
            {2, 3, 15}
        };

        int[][] resultado = app.roFB(finca);
        int[] ruta = resultado[0];
        int costo = resultado[1][0];

        assertEquals(3, ruta.length);
        assertTrue(Arrays.stream(ruta).distinct().count() == 3);
        assertTrue(costo >= 0);
    }

    @Test
    void testCostoDeterminista() {
        int[][] finca = {
            {0, 2, 10},
            {1, 1, 5}
        };

        long costo1 = app.calcularCosto(finca, new int[]{0, 1});
        long costo2 = app.calcularCosto(finca, new int[]{0, 1});
        assertEquals(costo1, costo2);
    }

    @Test
    void testLeerFincaDesdeRecursosArchivoInexistente() {
        int[][] finca = App.leerFincaDesdeRecursos("no_existe.txt");
        assertEquals(0, finca.length);
    }

    @Test
    void testCalcularCostoSinPenalizacion() {
        int[][] finca = {
            {0, 1, 10},
            {1, 1, 5}
        };
        int[] orden = {0, 1};
        long costo = app.calcularCosto(finca, orden);
        assertTrue(costo >= 0);
    }

    @Test
    void testCalcularCostoConPenalizacion() {
        int[][] finca = {
            {0, 1, 10},
            {0, 2, 5}
        };
        int[] orden = {1, 0};
        long costo = app.calcularCosto(finca, orden);
        assertTrue(costo > 0);
    }

    @Test
    void testProgramacionVoraz1ConValoresAleatorios() {
        int[][] finca = {
            {2, 5, 20},
            {3, 1, 10},
            {4, 2, 5},
            {1, 3, 15}
        };
        int[][] resultado = app.roV1(finca);
        int[] ruta = resultado[0];
        int costo = resultado[1][0];

        assertEquals(finca.length, ruta.length);
        assertTrue(costo >= 0);
    }

    @Test
    void testProgramacionVoraz2EvitaDivisionPorCero() {
        int[][] finca = {
            {2, 2, 10},
            {3, 1, 5}
        };
        int[][] resultado = app.roV2(finca);
        int[] ruta = resultado[0];
        int costo = resultado[1][0];

        assertEquals(2, ruta.length);
        assertTrue(costo >= 0);
    }

    @Test
    void testProgramacionDinaConValoresAleatorios() {
        int[][] finca = {
            {2, 5, 20},
            {3, 1, 10},
            {4, 2, 5},
            {1, 3, 15}
        };
        int[][] resultado = app.roPD(finca);
        int[] ruta = resultado[0];
        int costo = resultado[1][0];

        assertEquals(finca.length, ruta.length);
        assertTrue(costo >= 0);
    }

    @Test
    void testGetGreeting() {
        String saludo = app.getGreeting();
        assertEquals("Hello World!", saludo);
    }
}
